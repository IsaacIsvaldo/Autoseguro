npm install multer --save


permite upload no express
hcna@mpls!1



problemas que tenho

1-cmo redirecionar uma rota com parametro obrigatorio
estou com esse problema ao admin deletar uma viatura

2-nao consigo editar um ponto no mapa 

3-

Logica
ao user notificar
Ao notificar vou pegar  a matricula e pesquiso se existe uma apolice para com essa matriculase existe verifico se esta pago 
se nao esta pago vira 
nao pode notificar sinistro para essa viatura 
porque o seu banaficios nao foram pagos

var id = req.parms.id;

Apolice.findAll({
  where:{
    matricula:matricula
  }
}).then(apolice=>{
if( Apolice ){
if(apolice.data_terminio > data.now()){
  Não notificar 
  Renova o teu Apolice
}else{
  beneficio do seguro.findAll({
    where:{
      apoliceId:apolice.id
    }
  }).then(regist=>{
  if(regist){
    renderizar a rota de notificar...
  }else{
    Nao podes notificar porque ainda não pagaste o teu beneficio de sugo
  }

  })
}

}

})


...............................Logica apolice cração.................................
criar apolice
form de criacao de apolice 

cada apolice so pode ter um veiculo e este veiculo so pode estar na conta dele registado


veiculo.findAll({
  where:{
    matricula:matricula
  }
})then(result =>{
  apolice.findAll({
    where:{
      matricula:matricula
    }
  }).then(result=>{
    if(result == undefined){
      Vai cadstrar o apolice
      e renderizae a pagina de pagamento online
      ou ele pode se dirigir A loja e pagar o seu apolice
    }
  })
})
........................Promenores a levar em conta........................

a pessoa que vai solucionar que as seguradora usam nao se chama tecnico
pesquisar...


Mudar o tema do Módulos para:
Gestão de Utilizadores e seguros


var a = data.split("/")
 var dia = parseint(a[0])






-------------- pesquisar------- e em falta no sistema
pdfmake 
tarefas a se realizar :
fazer o print em PDF
gerar o FIPE
Agendandamentos de pagamento(variar o pagamanto levando em conta o tempo em que a apolice vai valer e o numero de cobertuas escolhidas)
cada cobertura é 5.000
farei 5.000 x o numero de coberturas x o numero de dias
Gerar rotas entre a lat e a lng presente na notificão  e o tecnico(a posicao do tecnico tem que ser pegado automaticamento...)


<div class="col-md-12">
                            <div class="card card-plain table-plain-bg">
                                <div class="card-header ">
                                    <h4 class="card-title">Registos de pagamentos</h4>
                                    <p class="card-category"></p>
                                </div>
                                <div class="card-body table-full-width table-responsive">
                                    <table  id="example2" class="table table-hover" >
                                       
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>



 «««««««««««««««««««««««««««««««
    Apolice.create({
      data_inicio:data_inicio,
      data_fim:data_fim,
      matricula:matricula ,
      franquia:franquia,
      responsabilidade_civil:responsabilidade_civil ,
      ocupantes:ocupantes,
      furtos:furtos,
      fenomenos_naturais:fenomenos_naturais,
      quebras_isoladas_vidros:quebras_isoladas_vidros,
      incendio:incendio,
      raio_explosao:raio_explosao ,
      queda_antenas:queda_antenas ,
      queda_Paineis_solares:queda_Paineis_solares,
      vandalismo: vandalismo,
      honorarios_tecnicos: honorarios_tecnicos,
      choque:choque ,
      colisao:colisao,
      capotamento:capotamento,
      secret:secret,
      estado: teste,
      userId:id

}).then(result=>{
  res.json(result)

}).catch(err =>{
   console.log(err)
})

«««««««««««««««««««««««««««««««
  // Data inicio
   var inicio = data_inicio.split("-")
   var a = parseInt(inicio[0]);
   var b = parseInt(inicio[1]);
   var c = parseInt(inicio[2]);
   var mes_i = (a * 12) + b;
   var dia_i = (mes_i * 31) + c;
   //Data fim
   var fim = data_fim.split("-")
   var d = parseInt(fim[0]);
   var e = parseInt(fim[1]);
   var f = parseInt(fim[2]);
   var mes_f = (d * 12) + e;
   var dia_f = (mes_f * 31) + f;

«««««««««««««««««««««««««««««««










     var valor = (result.responsabilidade_civil +
      result.ocupantes +
      result.furtos +
      result.fenomenos_naturais +
      result.quebras_isoladas_vidros +
      result.incendio +
      result.raio_explosao +
      result.queda_antenas +
      result.queda_Paineis_solares +
      result.vandalismo +
      result.honorarios_tecnicos +
      result.choque +
      result.colisao +
      result.capotamento);
     
      var pagar = (2000 * valor * dias);
      const getRandomIntegerInclusive = (min,max)=>
      Math.floor(Math.random()* (max - min + 1)) + min
      
      var data_marcacao = getRandomIntegerInclusive(5,9);
      var estado = 0;
     
     
      
     Marcacoes.create({secret:secret,quantia_pagar:pagar,data_marcacao:data_marcacao,estado:estado,userId:id}).then(()=>{
           res.redirect(`/user/Listar_apolice`)
     }).catch(err =>{
       
        console.log(err)
        res.redirect(`/user/Listar_apolice`)
     })
    



Tipo de seguro
valor 1-Seguro contra terceiros
valor 2- Seguro contra  terceiros com mas regalias
valor 3- seguro contra todos os riscos





    var anoAtual = Date().getFullYear();
               var nascimento = result.data.BIRTH_DATE;
               var inicio = nascimento.split("-")
               var a = parseInt(inicio[0])
               var ano = (anoAtual - a)
               var idade = 0;
               var estado_civil = 0;
               var sexo = 0;
               if (ano < 25) {//analizar A IDADE
                  idade = 100;
               } else if (result.data.ARITAL_STATUS_NAME== "Solteiro") {// Estado civil
                  estado_civil = 200;
               } else if (result.data.GENDER_NAME == "MASCULINO") {// O sexo
                  sexo = 250;
               }



               if (dados != undefined) {
                  if (dados.estado == 0) {
                     req.flash('errado', "Essa viatura ja tem apolice mas nao foi pago")
                     res.redirect("/user/index");
                  } else if (dados.estado == 1) {
                     req.flash('errado', "Essa viatura ja tem Apolice")
                     res.redirect("/user/index");
                  } else if (dados.estado > 1) {
                     //Verificar o BI para o aumento do preço...
                     Apolice.create({
                        plano_desejado: plano_desejado,
                        dias: dias,
                        matricula: matricula,
                        franquia: franquia,
                        tipo_seguro: tipo_seguro,
                        dia_inicio: '1000-01-01',
                        dia_fim: '1000-01-01',
                        secret: secret,
                        estado: 0,
                        valor: 0,
                        userId: id

                     }).then(result => {


                        var pagar = (1000 * tipo_seguro * mes) + (idade + estado_civil + sexo);
                        const getRandomIntegerInclusive = (min, max) =>
                           Math.floor(Math.random() * (max - min + 1)) + min

                        var data_marcacao = getRandomIntegerInclusive(5, 9);
                        var estado = 0;



                        Marcacoes.create({ secret: secret, quantia_pagar: pagar, data_marcacao: data_marcacao, estado: estado, userId: id }).then(() => {
                           req.flash('certo', "cadstrado")
                           res.redirect("/user/index");
                        }).catch(err => {
                           console.log(err)
                           req.flash('errado', " Apolice Nao cadstrado")
                           res.redirect("/user/index");
                        })




                     }).catch(err => {
                        console.log(err)
                        req.flash('errado', " Apolice Nao cadstrado")
                        res.redirect("/user/index");
                     })
                  }


               } else {
                  Apolice.create({
                     plano_desejado: plano_desejado,
                     dias: dias,
                     matricula: matricula,
                     franquia: franquia,
                     tipo_seguro: tipo_seguro,
                     dia_inicio: '1000-01-01',
                     dia_fim: '1000-01-01',
                     secret: secret,
                     valor: 0,
                     estado: 0,
                     userId: id

                  }).then(result => {

                     var pagar = (1000 * tipo_seguro * mes) + (idade + estado_civil + sexo);
                     const getRandomIntegerInclusive = (min, max) =>
                        Math.floor(Math.random() * (max - min + 1)) + min

                     var data_marcacao = getRandomIntegerInclusive(5, 9);
                     var estado = 0;



                     Marcacoes.create({ secret: secret, quantia_pagar: pagar, data_marcacao: data_marcacao, estado: estado, userId: id }).then(() => {
                        req.flash('certo', " Apolice Cadastrado com Sucesso")
                        res.redirect("/user/index");
                     }).catch(err => {
                        console.log(err)
                        req.flash('errado', " Apolice Nao cadstrado")
                        res.redirect("/user/index");
                     })




                  }).catch(err => {
                     console.log(err)
                     req.flash('errado', " Apolice Nao cadstrado")
                     res.redirect("/user/index");
                  })
               }




               router.get("/teste123" , async (req,res) =>{
   const noti = await Notificacao.findAll({ 
      attributes:["mes",[Sequelize.fn('count',Sequelize.col('mes')),'mescount']] ,
      group:"mes",
      order:["mes"],
      where:{
         estado:1
      }
     
   }).catch(erro =>{ console.log(erro) })
   

   const  notify = await Notificacao.findAll({ 
      attributes:["mes",[Sequelize.fn('count',Sequelize.col('mes')),'mescount']] ,
      group:"mes",
      order:["mes"]
   }).catch(erro =>{ console.log(erro) })
   

   var notify2 = notify.map(element =>{
      var r =noti.map(e=> (e.dataValues.mes==element.dataValues.mes)?e.dataValues.mescount:0);
      console.log(r)
      const v=r.map(r=>parseInt(r.toString())).reduce((prev, curr) => prev + curr, 0)
      var m=element.dataValues.mes;
      var mes;
      switch (m) {
         case 1:
            mes="Janeiro"
            break;
            case 4:
            mes="Abril"
            break;
            case 4:
            mes="Abril"
            break;
            case 4:
            mes="Abril"
            break;
            case 4:
            mes="Abril"
            break;
            case 4:
            mes="Abril"
            break;
            case 4:
            mes="Abril"
            break;
      
         default:
            break;
      }
      return{resolvido:v, naoresolvido:element.dataValues.mescount-1, mes:mes}



   })
   const meses =["Janeiro","Fevereiro","Marco","Abril","Maio","Junho","Julho"]
  var meses2 = meses.map( element =>{
     var m3 = notify2.filter(e=>e.mes==element)
     if(m3 == 0){
        return { resolvido:0,naoresolvido:0,mes:element}
     }else{
      return m3[0]
     }
   })
   const resolvido = meses2.map(element =>element.resolvido)
   console.log(resolvido)
})

router.get("/teste666", async (req,res)=>{
   const apolice = await Apolice.findAll({ 
      attributes:["tipo_seguro",[Sequelize.fn('count',Sequelize.col('tipo_seguro')),'tipocount']] ,
      group:"tipo_seguro",
      order:["tipo_seguro"],
     
     
   }).catch(erro =>{ console.log(erro) })
     const t  = apolice.map(element =>{
        if(element.dataValues.tipo_seguro ==1){
           return {nome:"Seguro contra Terceiros",total:element.dataValues.tipocount}
        }else if(element.dataValues.tipo_seguro ==2){
         return {nome:"Seguro contra Terceiros Avançado",total:element.dataValues.tipocount}
        }else{
         return {nome:"Seguro contra Todos os Riscos",total:element.dataValues.tipocount}
        }
     })
     const tipo_seguro = t.map(element =>element.nome)
     const total = t.map(element =>element.total)
     console.log(tipo_seguro)
     console.log(total)
})